<viewdata model="ProductSummary[]" categories="IDictionary<string, int>" />

<style>


    div#product-accordion 
    {
        float: left;
        width: 300px;
        height: 100%;
    }

    .ui-selectable-helper { border: 1px dotted #000; }

    div#products { margin-left: 310px; }
    div#product-template,
    div#category-template { display: none; }
    
    div#products .ui-selecting { background: #FECA40; }
	div#products .ui-selected { background: #F39814; color: white; }
	
    .product 
    {
        position: relative;
        float: left;
        margin: 5px;
        border: 3px solid #ccc;
        border-radius: 4px;
        -moz-border-radius: 4px;
        -webkit-border-radius: 4px;
        background-color: #ddd;
        padding: 7px;
        width: 186px;
        height: 180px;
        overflow: hidden;
        text-align: left;
    }
    
    .enabled 
    {
        border-color: #afa;
        background-color: #cfc;
    }
    
    .product .supplier
    {
        min-height: 14px;
        margin-bottom: 2px;
    }
    
    .product img
    {
        display: block;
        width: 100px;
        height: 100px;
    }
    
    .product .name
    {
        display: block;
        height: 28px;
        overflow: hidden;
    }   
    
    .product .brand
    {
        min-height: 14px;
        margin-top: 4px;
        font-size: 12px;
    }
    
    .product .problem
    {
        border-color: #f00;
        background-color: #f00;
        color: #fff;
        border-radius: 2px;
        -moz-border-radius: 2px;
        -webkit-border-radius: 2px;

    }
     
    .cost
    {
        padding: 0;
        position: absolute;
        bottom: 0;
        margin-bottom: 5px;
    }
    
    .cost li
    {
        list-style: none;
        float: left;
        width: 53px;
        text-align: left;
        font-size: 12px;
    }
    
    .cost li.shipping
    {
        width: 46px;
    }
    
    .cost li.handling
    {
        width: 28px;
    } 
    
    span#pagination input { width: 80px; }
    
    div#categories,
    div#tags
    {
        margin-left: -18px;
        margin-right: -18px;
        height: 500px;
        overflow: auto;
    }
    
    div#Catalog > button,
    div#tags-toolbar > button
    {
        margin-left: -18px;
        margin-bottom: 4px;
    }
    
    div#categories button .ui-button-text,
    div#Catalog button .ui-button-text,
    div#tags button .ui-button-text,
    div#tags-toolbar button .ui-button-text
    {
        font-size: 11px !important;
    }
    
    div#categories .product-count,
    div#tags .tag-count
    {
        float: right;
        line-height: 26px;
    }
    
    ul.category,
    ul.tags
    {
        float: right;
        clear: right;
        margin-bottom: 0;
        width: 80px; 
        padding: 0;
    }
    
    ul.tags 
    {
    }
    
    ul.category > li
    ul.tags > li
    {
        font-size: 8px;
        list-style-type: none;
        color: #000;
        text-align: right;
    }
    
    ul.tags > li 
    {
        border: 1px solid #333;
        background-color: #333;
        color: #fff;
        border-radius: 2px;
        -moz-border-radius: 2px;
        -webkit-border-radius: 2px;
    }  
      
    ul.tags > li > a
    {
        float: right;
        margin-right: 3px;
        text-decoration: none;
        color: inherit;
    }
    
    ul.tags > li.tag-reject  
    {
        background-color: #f00;
        border: 1px solid #f00;
    }
    
    ul.tags > li.tag-1-star,
    ul.tags > li.tag-2-star,
    ul.tags > li.tag-3-star,
    ul.tags > li.tag-4-star,
    ul.tags > li.tag-5-star
    {
        background-color: #ff0;
        border: 1px solid #ff0;
        color: #000;
    }

</style>

# Html.RenderPartial("_Filter", ViewData["filter"]);

<div id="products">
        
</div>

<div id="category-template">
    <div>
        <button class="no-button category-new">New Category</button>
        <button class="no-button category-rename">Rename Category</button>
        <button class="no-button category"></button>
        <span class="product-count"></span>
    </div>
</div>

<div id="product-template">
    <div class="product">
        <div class="supplier"></div>
        <ul class="tags"></ul>
        <ul class="category"></ul>
        <img class="thumbnail" />
        <div class="brand"></div>
        <a class="name" target="_blank"></a>
        <ul class="cost">
            <li class="msrp"></li>
            <li class="price"></li>
            <li class="shipping"></li>
            <li class="handling"></li>
        </ul>
    </div>
</div>

<content name="actions">
    
    <span id="pagination" if="null != Model">
        <button id="prev">Back</button>
        Showing <input id="from" /> to <span id="to"></span> of <span id="total">${Model.Length}</span>
        <button id="next">Next</button>
        Page Size: <input id="size" value="28" />
        Name/Brand Search: <input type="search" id="search" />
    </span>

    <ul>
        <li>${Html.ActionLink("Clear Images", MVC.Admin.Product.ClearImages())}</li>
        <li>${Html.ActionLink("Refresh Images", MVC.Admin.Product.RefreshImages())}</li>
    </ul>

</content>

<script type="text/javascript">
    
    var categories = ${JsonConvert.SerializeObject(categories)};
    var products = ${JsonConvert.SerializeObject(Model)};
    var filtered = products;
   
    function categoryNew() {
        var parent = $(this).closest('div').attr('id');
        var name = prompt('Enter the name for the new child category of "' + parent + '":');
        if (name && name.length > 0) {
            var cat = parent + '/' + name;
            var a = renderCategory(cat, 0);
            $(this).closest('div').after(a);
        }
    }   

    function categoryRename() {
        var parent = $(this).closest('div').attr('id');
        var name = prompt('Enter a new name for the category (you can reparent it, move it, change depth, etc.):', parent);
        if (name && name.length > 0) {
            $.ajax({
                type:   'POST',
                url:    '${Url.Action(MVC.Admin.Product.RenameCategory(null, null))}',
                data: {
                    from: parent,
                    to: name
                },
                success: function(data) {
                    alert('It worked: we renamed "' + parent + '" to "' + name + '". This affected ' + data + '. You should refresh this page immediatley to see the changes.');
                }
            });
        }
    }

    function categoryClick()  {
        var cat = $(this).closest('div').attr('id');
        var ids = selectedProducts();
        if (ids.length > 0)
        {
            $.ajax({
                type:   'POST',
                url:    '${Url.Action(MVC.Admin.Product.Categorize(null, null))}',
                data: { ids: ids, category: cat},
                traditional: true,
                success: updateProducts
            });
        }
    }

    function renderCategory(category, filtered) {
        var a = $('#category-template > div').clone();
        a.attr('id', category);

        if (category.indexOf('Catalog/') == 0) {
            category = category.substr(8);
        }

        var parts = category.split('/');

        a.find('button.category-new')
            .click(categoryNew)
            .button({ icons: { primary: 'ui-icon-plus' }, text: false });
        a.find('button.category-rename')
            .click(categoryRename)
            .button({ icons: { primary: 'ui-icon-pencil' }, text: false });
        a.find('button.category')
            .text(parts[parts.length-1]) 
            .css('margin-left', (parts.length-1) * 15  )
            .click(categoryClick)
            .button();
        a.find('.product-count').text(filtered);       
        return a;
    }

    function presentCategories() {
        var panel = $('#categories');
        panel.empty();
        for (var category in categories) {
            panel.append(renderCategory(category, categories[category]));
        }
    }

    function renderProduct(p) {
        var a = $('#product-template > .product').clone();
        a.attr('id', p.Id);
        if (p.Enabled)
        {
            a.addClass('enabled');
        }
        if (p.Category && p.Category.length > 0)
        {
            var list = a.find('.category');
            for (var i in p.Category) {
                list.append('<li>' + p.Category[i] + '</li>');
            }
        }
        if (p.Tags && p.Tags.length > 0)
        {
            var list = a.find('.tags');
            for (var i in p.Tags) {
                list.append('<li class="tag-' + p.Tags[i] + '">' + p.Tags[i] + '<a href="-' + p.Tags[i] + '">x</a></li>');
            }
        }
        a.find('.thumbnail').attr('src', '/i/' + p.Id.substr(8) + '?w=100&h=100');
        a.find('.name').text(p.Name).attr('href', '/admin/products/' + p.Id);
        a.find('.supplier').text(p.Supplier);
        if (!p.Supplier)
        {
            a.find('.supplier').addClass('problem');
        }
        a.find('.brand').text(p.Brand);
        if (!p.Brand)
        {
            a.find('.brand').addClass('problem');
        }
        a.find('.msrp').text('m:' + (p.Msrp == undefined ? '-' : '$' + Math.round(p.Msrp)));
        if (p.Msrp == undefined || p.Msrp == 0)
        {
            a.find('.msrp').addClass('problem');
        }
        a.find('.price').text('p:' + (p.Price == undefined ? '-' : '$' + Math.round(p.Price)));
        if (p.Price == undefined || p.Price == 0)
        {
            a.find('.price').addClass('price');
        }
        a.find('.shipping').text('s:' + (p.Shipping == undefined ? '-' : '$' + Math.round(p.Shipping)));
        if (p.Shipping == undefined || p.Shipping == 0)
        {
            a.find('.shipping').addClass('problem');
        }
        a.find('.handling').text('h:' + (p.Handling == undefined ? '-' : '$' + Math.round(p.Handling)));
        a.data('product', p);
        return a;
    }
    
    function presentProducts(start, size) {
        var panel = $('#products');
        panel.selectable('destroy');
        panel.empty();
        if (isNaN(size) || size < 10) size = 10;
        if (start >= filtered.length) start = filtered.length - size;
        if (start < 0) start = 0;
        for (i = start; i < start+size && i < filtered.length;  i++) {
            panel.append(renderProduct(filtered[i]));
        }
        $('#from').val(start + 1);
        $('#to').text(i);
        $('#total').text(filtered.length);
        $('#products').selectable({
            filter: '.product',
            cancel: 'a,:input,option'
        });
    }

    function refreshProducts(increment) {
        presentProducts(Number($('#from').val()) + increment - 1, Number($('#size').val()));
    }

    function selectedProducts() {
        var ids = [];
        $('#products .ui-selected').each(function(i, e) {
            ids.push(e.id);
        });
        return ids;
    }

    function updateProducts(data) {
        for (var i in data) {
            for (var j in products) {
                if (products[j].Id == data[i].Id) {
                    products[j] = data[i];
                }
            }
            for (var j in filtered) {
                if (filtered[j].Id == data[i].Id) {
                    filtered[j] = data[i];
                }
            }
        }    
        refreshProducts(0);
    }
    
    $(function() {   

        $('#next').button({ icons:  { primary: 'ui-icon-seek-next' } });
        $('#prev').button({ icons:  { primary: 'ui-icon-seek-prev' }, text: false });
        $('#product-accordion').accordion({
            autoHeight: false
        });
        if (null != filtered) {                             
            presentProducts(0, Number($('#size').val()));
        }
        if (null != categories) {
            presentCategories();
        }
        $('#size').change(function() {
            presentProducts(0, Number($('#size').val()));
        });
        $('#prev').click(function() {
            refreshProducts(-1 * Number($('#size').val()));
        });
        $('#next').click(function() {
            refreshProducts(Number($('#size').val()));
        });
        $('#from').keydown(function(event) {
            if (event.which == 13) {
                refreshProducts(0);
            }
        });

        $('#category-new-top')
            .click(categoryNew)
            .button({ icons: { primary: 'ui-icon-plus' } })

        $('#tags-new')
            .click(function() {
                var t = prompt('Enter the new tag name:');
                if (t && t.length > 0) {
                    $('<div id="' + t + '">' + 
                        '<button class="tag">' + t + '</button>' + 
                        '<span class="tag-count">0</span>' +
                      '</div>')
                      .appendTo('#tags')
                      .find('button').button();
                }
            })
            .button({ icons: { primary: 'ui-icon-plus' } });

        $('#tags button').live('click', function() {
            var t = $(this).closest('div').attr('id');
            var ids = selectedProducts();
            if (ids.length > 0)
            {
                $.ajax({
                    type:   'POST',
                    url:    '${Url.Action(MVC.Admin.Product.Tag(null, null))}',
                    data: { ids: ids, tag: t},
                    traditional: true,
                    success: updateProducts
                });     
            }
        });

        $('#products ul.tags a').live('click', function() {

            // remove the tag from all selected products if the clicked product
            // is also selected, otherwise just remove from this product only.
            var id = $(this).closest('div.product').attr('id');
            var ids = selectedProducts();
            var is_selected = false;    
            for (var i in ids) {
                if (ids[i] == id) {
                    is_selected = true;
                    break;
                }
            }
            if (!is_selected) {
                ids = [id];
            }
            
            var t = $(this).attr('href');

            $.ajax({
                type:   'POST',
                url:    '${Url.Action(MVC.Admin.Product.Tag(null, null))}',
                data: { ids: ids, tag: t},
                traditional: true,
                success: updateProducts
            });
            
            return false;     
        });

        $('#product-accordion button.enable').click(function() {
            var enable = $(this).attr('value');
            var ids = selectedProducts();
            if (ids.length > 0)
            {
                $.ajax({
                    type:   'POST',
                    url:    '${Url.Action(MVC.Admin.Product.Enable(null, null))}',
                    data: { ids: ids, enable: enable },
                    traditional: true,
                    success: updateProducts
                });
            }
        });

        $('#search').change(function() {
            var predicate = $(this).val().toLowerCase();
            filtered = [];
            for (var i in products) {
                if (products[i].Name.toLowerCase().indexOf(predicate) != -1 ||
                    products[i].Brand.toLowerCase().indexOf(predicate) != -1) {
                    filtered.push(products[i]);
                }
            }    
            presentProducts(0, Number($('#size').val()));
        });
    });

</script>