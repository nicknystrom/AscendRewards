// <auto-generated />
// This file was generated by a T4 template.
// Don't change it directly as your change would get overwritten.  Instead, make changes
// to the .tt file (i.e. the T4 template) and save it to regenerate this file.

// Make sure the compiler doesn't complain about missing Xml comments
#pragma warning disable 1591
#pragma warning disable 0108
#region T4MVC

using System;
using System.Collections.Generic;
using System.Runtime.CompilerServices;
using System.Web;
using System.Web.Hosting;
using System.Web.Mvc;
using System.Web.Mvc.Ajax;
using System.Web.Mvc.Html;
using System.Web.Routing;
using T4MVC;

[CompilerGenerated]
public static class MVC {
    static readonly AdminClass s_Admin = new AdminClass();
    public static AdminClass Admin { get { return s_Admin; } }
    static readonly DashClass s_Dash = new DashClass();
    public static DashClass Dash { get { return s_Dash; } }
    static readonly MobileClass s_Mobile = new MobileClass();
    public static MobileClass Mobile { get { return s_Mobile; } }
    static readonly PublicClass s_Public = new PublicClass();
    public static PublicClass Public { get { return s_Public; } }
    static readonly SiteClass s_Site = new SiteClass();
    public static SiteClass Site { get { return s_Site; } }
    public static T4MVC.SharedController Shared = new T4MVC.SharedController();
}

namespace T4MVC {
    [CompilerGenerated]
    public class AdminClass {
        public readonly string Name = "Admin";
        public Ascend.Web.Areas.Admin.Controllers.AccountController Account = new Ascend.Web.Areas.Admin.Controllers.T4MVC_AccountController();
        public Ascend.Web.Areas.Admin.Controllers.AwardController Award = new Ascend.Web.Areas.Admin.Controllers.T4MVC_AwardController();
        public Ascend.Web.Areas.Admin.Controllers.CatalogController Catalog = new Ascend.Web.Areas.Admin.Controllers.T4MVC_CatalogController();
        public Ascend.Web.Areas.Admin.Controllers.ConciergeController Concierge = new Ascend.Web.Areas.Admin.Controllers.T4MVC_ConciergeController();
        public Ascend.Web.Areas.Admin.Controllers.ConfigurationController Configuration = new Ascend.Web.Areas.Admin.Controllers.T4MVC_ConfigurationController();
        public Ascend.Web.Areas.Admin.Controllers.ErrorController Error = new Ascend.Web.Areas.Admin.Controllers.T4MVC_ErrorController();
        public Ascend.Web.Areas.Admin.Controllers.FileController File = new Ascend.Web.Areas.Admin.Controllers.T4MVC_FileController();
        public Ascend.Web.Areas.Admin.Controllers.GameController Game = new Ascend.Web.Areas.Admin.Controllers.T4MVC_GameController();
        public Ascend.Web.Areas.Admin.Controllers.GroupController Group = new Ascend.Web.Areas.Admin.Controllers.T4MVC_GroupController();
        public Ascend.Web.Areas.Admin.Controllers.HomeController Home = new Ascend.Web.Areas.Admin.Controllers.T4MVC_HomeController();
        public Ascend.Web.Areas.Admin.Controllers.ImportController Import = new Ascend.Web.Areas.Admin.Controllers.T4MVC_ImportController();
        public Ascend.Web.Areas.Admin.Controllers.LedgerController Ledger = new Ascend.Web.Areas.Admin.Controllers.T4MVC_LedgerController();
        public Ascend.Web.Areas.Admin.Controllers.MenuController Menu = new Ascend.Web.Areas.Admin.Controllers.T4MVC_MenuController();
        public Ascend.Web.Areas.Admin.Controllers.MessagingController Messaging = new Ascend.Web.Areas.Admin.Controllers.T4MVC_MessagingController();
        public Ascend.Web.Areas.Admin.Controllers.MigrationController Migration = new Ascend.Web.Areas.Admin.Controllers.T4MVC_MigrationController();
        public Ascend.Web.Areas.Admin.Controllers.PageController Page = new Ascend.Web.Areas.Admin.Controllers.T4MVC_PageController();
        public Ascend.Web.Areas.Admin.Controllers.ProductController Product = new Ascend.Web.Areas.Admin.Controllers.T4MVC_ProductController();
        public Ascend.Web.Areas.Admin.Controllers.QuizController Quiz = new Ascend.Web.Areas.Admin.Controllers.T4MVC_QuizController();
        public Ascend.Web.Areas.Admin.Controllers.SurveyController Survey = new Ascend.Web.Areas.Admin.Controllers.T4MVC_SurveyController();
        public Ascend.Web.Areas.Admin.Controllers.TenantController Tenant = new Ascend.Web.Areas.Admin.Controllers.T4MVC_TenantController();
        public Ascend.Web.Areas.Admin.Controllers.ThemeController Theme = new Ascend.Web.Areas.Admin.Controllers.T4MVC_ThemeController();
        public Ascend.Web.Areas.Admin.Controllers.UserController User = new Ascend.Web.Areas.Admin.Controllers.T4MVC_UserController();
        public Ascend.Web.Areas.Admin.Controllers.ValidationController Validation = new Ascend.Web.Areas.Admin.Controllers.T4MVC_ValidationController();
        public T4MVC.Admin.SharedController Shared = new T4MVC.Admin.SharedController();
    }
    [CompilerGenerated]
    public class DashClass {
        public readonly string Name = "Dash";
        public Ascend.Web.Areas.Dash.Controllers.HomeController Home = new Ascend.Web.Areas.Dash.Controllers.T4MVC_HomeController();
        public Ascend.Web.Areas.Dash.Controllers.ReportController Report = new Ascend.Web.Areas.Dash.Controllers.T4MVC_ReportController();
        public Ascend.Web.Areas.Dash.Controllers.UserController User = new Ascend.Web.Areas.Dash.Controllers.T4MVC_UserController();
        public Ascend.Web.Areas.Dash.Controllers.WidgetController Widget = new Ascend.Web.Areas.Dash.Controllers.T4MVC_WidgetController();
        public T4MVC.Dash.SharedController Shared = new T4MVC.Dash.SharedController();
    }
    [CompilerGenerated]
    public class MobileClass {
        public readonly string Name = "Mobile";
        public Ascend.Web.Areas.Mobile.Controllers.HomeController Home = new Ascend.Web.Areas.Mobile.Controllers.T4MVC_HomeController();
        public Ascend.Web.Areas.Mobile.Controllers.LoginController Login = new Ascend.Web.Areas.Mobile.Controllers.T4MVC_LoginController();
        public Ascend.Web.Areas.Mobile.Controllers.MobileController Mobile = new Ascend.Web.Areas.Mobile.Controllers.T4MVC_MobileController();
        public T4MVC.Mobile.SharedController Shared = new T4MVC.Mobile.SharedController();
    }
    [CompilerGenerated]
    public class PublicClass {
        public readonly string Name = "Public";
        public Ascend.Web.Areas.Public.Controllers.AwardController Award = new Ascend.Web.Areas.Public.Controllers.T4MVC_AwardController();
        public Ascend.Web.Areas.Public.Controllers.FileController File = new Ascend.Web.Areas.Public.Controllers.T4MVC_FileController();
        public Ascend.Web.Areas.Public.Controllers.ImageController Image = new Ascend.Web.Areas.Public.Controllers.T4MVC_ImageController();
        public Ascend.Web.Areas.Public.Controllers.LoginController Login = new Ascend.Web.Areas.Public.Controllers.T4MVC_LoginController();
        public Ascend.Web.Areas.Public.Controllers.ThemeController Theme = new Ascend.Web.Areas.Public.Controllers.T4MVC_ThemeController();
        public T4MVC.Public.SharedController Shared = new T4MVC.Public.SharedController();
    }
    [CompilerGenerated]
    public class SiteClass {
        public readonly string Name = "Site";
        public Ascend.Web.Areas.Site.Controllers.AwardController Award = new Ascend.Web.Areas.Site.Controllers.T4MVC_AwardController();
        public Ascend.Web.Areas.Site.Controllers.BudgetController Budget = new Ascend.Web.Areas.Site.Controllers.T4MVC_BudgetController();
        public Ascend.Web.Areas.Site.Controllers.CartController Cart = new Ascend.Web.Areas.Site.Controllers.T4MVC_CartController();
        public Ascend.Web.Areas.Site.Controllers.CatalogController Catalog = new Ascend.Web.Areas.Site.Controllers.T4MVC_CatalogController();
        public Ascend.Web.Areas.Site.Controllers.GameController Game = new Ascend.Web.Areas.Site.Controllers.T4MVC_GameController();
        public Ascend.Web.Areas.Site.Controllers.HomeController Home = new Ascend.Web.Areas.Site.Controllers.T4MVC_HomeController();
        public Ascend.Web.Areas.Site.Controllers.OrderController Order = new Ascend.Web.Areas.Site.Controllers.T4MVC_OrderController();
        public Ascend.Web.Areas.Site.Controllers.PageController Page = new Ascend.Web.Areas.Site.Controllers.T4MVC_PageController();
        public Ascend.Web.Areas.Site.Controllers.ProfileController Profile = new Ascend.Web.Areas.Site.Controllers.T4MVC_ProfileController();
        public Ascend.Web.Areas.Site.Controllers.QuizController Quiz = new Ascend.Web.Areas.Site.Controllers.T4MVC_QuizController();
        public Ascend.Web.Areas.Site.Controllers.SiteController Site = new Ascend.Web.Areas.Site.Controllers.T4MVC_SiteController();
        public Ascend.Web.Areas.Site.Controllers.SurveyController Survey = new Ascend.Web.Areas.Site.Controllers.T4MVC_SurveyController();
        public Ascend.Web.Areas.Site.Controllers.TicketController Ticket = new Ascend.Web.Areas.Site.Controllers.T4MVC_TicketController();
        public T4MVC.Site.SharedController Shared = new T4MVC.Site.SharedController();
    }
}

namespace System.Web.Mvc {
    [CompilerGenerated]
    public static class T4Extensions {
        public static MvcHtmlString ActionLink(this HtmlHelper htmlHelper, string linkText, ActionResult result) {
            return htmlHelper.RouteLink(linkText, result.GetRouteValueDictionary());
        }

        public static MvcHtmlString ActionLink(this HtmlHelper htmlHelper, string linkText, ActionResult result, object htmlAttributes) {
            return ActionLink(htmlHelper, linkText, result, new RouteValueDictionary(htmlAttributes));
        }

        public static MvcHtmlString ActionLink(this HtmlHelper htmlHelper, string linkText, ActionResult result, IDictionary<string, object> htmlAttributes) {
            return htmlHelper.RouteLink(linkText, result.GetRouteValueDictionary(), htmlAttributes);
        }

        public static MvcForm BeginForm(this HtmlHelper htmlHelper, ActionResult result) {
            return htmlHelper.BeginForm(result, FormMethod.Post, null);
        }

        public static MvcForm BeginForm(this HtmlHelper htmlHelper, ActionResult result, FormMethod formMethod) {
            return htmlHelper.BeginForm(result, formMethod, null);
        }

        public static MvcForm BeginForm(this HtmlHelper htmlHelper, ActionResult result, FormMethod formMethod, object htmlAttributes) {
            return BeginForm(htmlHelper, result, formMethod, new RouteValueDictionary(htmlAttributes));
        }

        public static MvcForm BeginForm(this HtmlHelper htmlHelper, ActionResult result, FormMethod formMethod, IDictionary<string, object> htmlAttributes) {
            var callInfo = (IT4MVCActionResult)result;
            return htmlHelper.BeginForm(callInfo.Action, callInfo.Controller, callInfo.RouteValues, formMethod, htmlAttributes);
        }

        public static void RenderAction(this HtmlHelper htmlHelper, ActionResult result) {
            var callInfo = (IT4MVCActionResult)result;
            htmlHelper.RenderAction(callInfo.Action, callInfo.Controller, callInfo.RouteValues);
        }

        public static MvcHtmlString Action(this HtmlHelper htmlHelper, ActionResult result) {
            var callInfo = (IT4MVCActionResult)result;
            return htmlHelper.Action(callInfo.Action, callInfo.Controller, callInfo.RouteValues);
        }
        public static string Action(this UrlHelper urlHelper, ActionResult result) {
            return urlHelper.RouteUrl(result.GetRouteValueDictionary());
        }

        public static MvcHtmlString ActionLink(this AjaxHelper ajaxHelper, string linkText, ActionResult result, AjaxOptions ajaxOptions) {
            return ajaxHelper.RouteLink(linkText, result.GetRouteValueDictionary(), ajaxOptions);
        }

        public static MvcHtmlString ActionLink(this AjaxHelper ajaxHelper, string linkText, ActionResult result, AjaxOptions ajaxOptions, object htmlAttributes) {
            return ajaxHelper.RouteLink(linkText, result.GetRouteValueDictionary(), ajaxOptions, new RouteValueDictionary(htmlAttributes));
        }

        public static MvcHtmlString ActionLink(this AjaxHelper ajaxHelper, string linkText, ActionResult result, AjaxOptions ajaxOptions, IDictionary<string, object> htmlAttributes) {
            return ajaxHelper.RouteLink(linkText, result.GetRouteValueDictionary(), ajaxOptions, htmlAttributes);
        }

        public static Route MapRoute(this RouteCollection routes, string name, string url, ActionResult result) {
            return routes.MapRoute(name, url, result, (ActionResult)null);
        }

        public static Route MapRoute(this RouteCollection routes, string name, string url, ActionResult result, object defaults) {
            // Start by adding the default values from the anonymous object (if any)
            var routeValues = new RouteValueDictionary(defaults);

            // Then add the Controller/Action names and the parameters from the call
            foreach (var pair in result.GetRouteValueDictionary()) {
                routeValues.Add(pair.Key, pair.Value);
            }

            // Create and add the route
            var route = new Route(url, routeValues, new MvcRouteHandler());
            routes.Add(name, route);
            return route;
        }

        public static RouteValueDictionary GetRouteValueDictionary(this ActionResult result) {
            return ((IT4MVCActionResult)result).RouteValues;
        }

        public static void InitMVCT4Result(this IT4MVCActionResult result, string area, string controller, string action) {
            result.Controller = controller;
            result.Action = action;
            result.RouteValues = new RouteValueDictionary();
            result.RouteValues.Add("Area", area ?? "");
            result.RouteValues.Add("Controller", controller);
            result.RouteValues.Add("Action", action);
        }

        public static bool FileExists(string virtualPath) {
            if (!HostingEnvironment.IsHosted) return false;
            string filePath = HostingEnvironment.MapPath(virtualPath);
            return System.IO.File.Exists(filePath);
        }
    }
}

[CompilerGenerated]
public interface IT4MVCActionResult {
    string Action { get; set; }
    string Controller { get; set; }
    RouteValueDictionary RouteValues { get; set; }
}

[CompilerGenerated]
public class T4MVC_ActionResult : System.Web.Mvc.ActionResult, IT4MVCActionResult {
    public T4MVC_ActionResult(string area, string controller, string action): base()  {
        this.InitMVCT4Result(area, controller, action);
    }
     
    public override void ExecuteResult(System.Web.Mvc.ControllerContext context) { }
    
    public string Controller { get; set; }
    public string Action { get; set; }
    public RouteValueDictionary RouteValues { get; set; }
}
[CompilerGenerated]
public class T4MVC_JsonResult : System.Web.Mvc.JsonResult, IT4MVCActionResult {
    public T4MVC_JsonResult(string area, string controller, string action): base()  {
        this.InitMVCT4Result(area, controller, action);
    }
    
    public string Controller { get; set; }
    public string Action { get; set; }
    public RouteValueDictionary RouteValues { get; set; }
}



namespace Links {
    [CompilerGenerated]
    public static class Content {
        private const string URLPATH = "~/Content";
        public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
        public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
        public static readonly string Admin_css = Url("Admin.css");
        public static readonly string Admin_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/Admin.min.js") ? Url("Admin.min.js") : Url("Admin.js");
        [CompilerGenerated]
        public static class Games {
            private const string URLPATH = "~/Content/Games";
            public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
            public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
            [CompilerGenerated]
            public static class Match3 {
                private const string URLPATH = "~/Content/Games/Match3";
                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                public static readonly string board_xcf = Url("board.xcf");
                public static readonly string jquery_match3_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery.match3.min.js") ? Url("jquery.match3.min.js") : Url("jquery.match3.js");
                public static readonly string sprites_png = Url("sprites.png");
                public static readonly string sprites_xcf = Url("sprites.xcf");
            }
        
        }
    
        [CompilerGenerated]
        public static class Images {
            private const string URLPATH = "~/Content/Images";
            public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
            public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
            [CompilerGenerated]
            public static class Admin {
                private const string URLPATH = "~/Content/Images/Admin";
                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                public static readonly string ascend_png = Url("ascend.png");
                public static readonly string recurve_png = Url("recurve.png");
            }
        
            public static readonly string arrow_next_png = Url("arrow-next.png");
            public static readonly string arrow_prev_png = Url("arrow-prev.png");
            public static readonly string autocomplete_gif = Url("autocomplete.gif");
            [CompilerGenerated]
            public static class Fancybox {
                private const string URLPATH = "~/Content/Images/Fancybox";
                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                public static readonly string blank_gif = Url("blank.gif");
                public static readonly string fancy_close_png = Url("fancy_close.png");
                public static readonly string fancy_loading_png = Url("fancy_loading.png");
                public static readonly string fancy_nav_left_png = Url("fancy_nav_left.png");
                public static readonly string fancy_nav_right_png = Url("fancy_nav_right.png");
                public static readonly string fancy_shadow_e_png = Url("fancy_shadow_e.png");
                public static readonly string fancy_shadow_n_png = Url("fancy_shadow_n.png");
                public static readonly string fancy_shadow_ne_png = Url("fancy_shadow_ne.png");
                public static readonly string fancy_shadow_nw_png = Url("fancy_shadow_nw.png");
                public static readonly string fancy_shadow_s_png = Url("fancy_shadow_s.png");
                public static readonly string fancy_shadow_se_png = Url("fancy_shadow_se.png");
                public static readonly string fancy_shadow_sw_png = Url("fancy_shadow_sw.png");
                public static readonly string fancy_shadow_w_png = Url("fancy_shadow_w.png");
                public static readonly string fancy_title_left_png = Url("fancy_title_left.png");
                public static readonly string fancy_title_main_png = Url("fancy_title_main.png");
                public static readonly string fancy_title_over_png = Url("fancy_title_over.png");
                public static readonly string fancy_title_right_png = Url("fancy_title_right.png");
                public static readonly string fancybox_x_png = Url("fancybox-x.png");
                public static readonly string fancybox_y_png = Url("fancybox-y.png");
                public static readonly string fancybox_png = Url("fancybox.png");
                public static readonly string jquery_fancybox_1_3_3_css = Url("jquery.fancybox-1.3.3.css");
            }
        
            [CompilerGenerated]
            public static class FileType {
                private const string URLPATH = "~/Content/Images/FileType";
                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                public static readonly string Archive_png = Url("Archive.png");
                public static readonly string Document_png = Url("Document.png");
                public static readonly string HTML_png = Url("HTML.png");
                public static readonly string Image_png = Url("Image.png");
                public static readonly string PDF_png = Url("PDF.png");
                public static readonly string Spreadsheet_png = Url("Spreadsheet.png");
                public static readonly string Unknown_png = Url("Unknown.png");
                public static readonly string Video_png = Url("Video.png");
            }
        
            [CompilerGenerated]
            public static class Icons {
                private const string URLPATH = "~/Content/Images/Icons";
                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                public static readonly string apple_touch_icon_114x114_png = Url("apple-touch-icon-114x114.png");
                public static readonly string apple_touch_icon_57x57_png = Url("apple-touch-icon-57x57.png");
                public static readonly string apple_touch_icon_72x72_png = Url("apple-touch-icon-72x72.png");
                public static readonly string apple_touch_icon_precomposed_png = Url("apple-touch-icon-precomposed.png");
                public static readonly string favicon_ico = Url("favicon.ico");
            }
        
            public static readonly string no_image_png = Url("no-image.png");
            public static readonly string Plus_png = Url("Plus.png");
            public static readonly string Recurve_png = Url("Recurve.png");
        }
    
        [CompilerGenerated]
        public static class Mobile {
            private const string URLPATH = "~/Content/Mobile";
            public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
            public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
            public static readonly string jqtouch_css = Url("jqtouch.css");
            public static readonly string jqtouch_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jqtouch.min.js") ? Url("jqtouch.min.js") : Url("jqtouch.js");
            public static readonly string jqtouch_transitions_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jqtouch.transitions.min.js") ? Url("jqtouch.transitions.min.js") : Url("jqtouch.transitions.js");
            [CompilerGenerated]
            public static class Themes {
                private const string URLPATH = "~/Content/Mobile/Themes";
                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                [CompilerGenerated]
                public static class apple {
                    private const string URLPATH = "~/Content/Mobile/Themes/apple";
                    public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                    public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                    [CompilerGenerated]
                    public static class img {
                        private const string URLPATH = "~/Content/Mobile/Themes/apple/img";
                        public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                        public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                        public static readonly string activeButton_png = Url("activeButton.png");
                        public static readonly string backButton_png = Url("backButton.png");
                        public static readonly string blueButton_png = Url("blueButton.png");
                        public static readonly string cancel_png = Url("cancel.png");
                        public static readonly string chevron_png = Url("chevron.png");
                        public static readonly string grayButton_png = Url("grayButton.png");
                        public static readonly string greenButton_png = Url("greenButton.png");
                        public static readonly string listArrowSel_png = Url("listArrowSel.png");
                        public static readonly string listGroup_png = Url("listGroup.png");
                        public static readonly string loading_gif = Url("loading.gif");
                        public static readonly string on_off_png = Url("on_off.png");
                        public static readonly string pinstripes_png = Url("pinstripes.png");
                        public static readonly string redButton_png = Url("redButton.png");
                        public static readonly string selection_png = Url("selection.png");
                        public static readonly string thumb_png = Url("thumb.png");
                        public static readonly string toggle_png = Url("toggle.png");
                        public static readonly string toggleOn_png = Url("toggleOn.png");
                        public static readonly string toolbar_png = Url("toolbar.png");
                        public static readonly string toolButton_png = Url("toolButton.png");
                        public static readonly string whiteButton_png = Url("whiteButton.png");
                    }
                
                    public static readonly string theme_css = Url("theme.css");
                    public static readonly string theme_min_css = Url("theme.min.css");
                }
            
                [CompilerGenerated]
                public static class @default {
                    private const string URLPATH = "~/Content/Mobile/Themes/default";
                    public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                    public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                    [CompilerGenerated]
                    public static class img {
                        private const string URLPATH = "~/Content/Mobile/Themes/default/img";
                        public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                        public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                        public static readonly string backButton_png = Url("backButton.png");
                        public static readonly string backButtonActive_png = Url("backButtonActive.png");
                        public static readonly string bigButton_png = Url("bigButton.png");
                        public static readonly string bigButtonActive_png = Url("bigButtonActive.png");
                        public static readonly string button_png = Url("button.png");
                        public static readonly string buttonActive_png = Url("buttonActive.png");
                        public static readonly string chevron_png = Url("chevron.png");
                        public static readonly string chevronActive_png = Url("chevronActive.png");
                        public static readonly string chevronCircle_png = Url("chevronCircle.png");
                        public static readonly string chevronCircleActive_png = Url("chevronCircleActive.png");
                        public static readonly string loading_gif = Url("loading.gif");
                        public static readonly string toggleSwitch_png = Url("toggleSwitch.png");
                        public static readonly string toolbarBackground_png = Url("toolbarBackground.png");
                    }
                
                    public static readonly string theme_css = Url("theme.css");
                }
            
                [CompilerGenerated]
                public static class jqt {
                    private const string URLPATH = "~/Content/Mobile/Themes/jqt";
                    public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                    public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                    [CompilerGenerated]
                    public static class img {
                        private const string URLPATH = "~/Content/Mobile/Themes/jqt/img";
                        public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                        public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                        public static readonly string activeButton_png = Url("activeButton.png");
                        public static readonly string back_button_png = Url("back_button.png");
                        public static readonly string back_button_clicked_png = Url("back_button_clicked.png");
                        public static readonly string blueButton_png = Url("blueButton.png");
                        public static readonly string button_png = Url("button.png");
                        public static readonly string button_clicked_png = Url("button_clicked.png");
                        public static readonly string chevron_png = Url("chevron.png");
                        public static readonly string chevron_circle_png = Url("chevron_circle.png");
                        public static readonly string grayButton_png = Url("grayButton.png");
                        public static readonly string greenButton_png = Url("greenButton.png");
                        public static readonly string loading_gif = Url("loading.gif");
                        public static readonly string on_off_png = Url("on_off.png");
                        public static readonly string redButton_png = Url("redButton.png");
                        public static readonly string rowhead_png = Url("rowhead.png");
                        public static readonly string toggle_png = Url("toggle.png");
                        public static readonly string toggleOn_png = Url("toggleOn.png");
                        public static readonly string toolbar_png = Url("toolbar.png");
                        public static readonly string whiteButton_png = Url("whiteButton.png");
                    }
                
                    public static readonly string theme_css = Url("theme.css");
                    public static readonly string theme_min_css = Url("theme.min.css");
                }
            
            }
        
        }
    
        public static readonly string products_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/products.min.js") ? Url("products.min.js") : Url("products.js");
        [CompilerGenerated]
        public static class Scripts {
            private const string URLPATH = "~/Content/Scripts";
            public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
            public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
            public static readonly string jquery_1_4_2_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery-1.4.2.min.js") ? Url("jquery-1.4.2.min.js") : Url("jquery-1.4.2.js");
            public static readonly string jquery_1_4_2_min_js = Url("jquery-1.4.2.min.js");
            public static readonly string jquery_ui_1_8_2_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery-ui-1.8.2.min.js") ? Url("jquery-ui-1.8.2.min.js") : Url("jquery-ui-1.8.2.js");
            public static readonly string jquery_autocomplete_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery.autocomplete.min.js") ? Url("jquery.autocomplete.min.js") : Url("jquery.autocomplete.js");
            public static readonly string jquery_cookie_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery.cookie.min.js") ? Url("jquery.cookie.min.js") : Url("jquery.cookie.js");
            public static readonly string jquery_dataTables_min_js = Url("jquery.dataTables.min.js");
            public static readonly string jquery_fancybox_1_3_3_pack_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery.fancybox-1.3.3.pack.min.js") ? Url("jquery.fancybox-1.3.3.pack.min.js") : Url("jquery.fancybox-1.3.3.pack.js");
        }
    
        [CompilerGenerated]
        public static class Themes {
            private const string URLPATH = "~/Content/Themes";
            public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
            public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
            [CompilerGenerated]
            public static class Aristo {
                private const string URLPATH = "~/Content/Themes/Aristo";
                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                [CompilerGenerated]
                public static class images {
                    private const string URLPATH = "~/Content/Themes/Aristo/images";
                    public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                    public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                    public static readonly string button_bg_png = Url("button_bg.png");
                    public static readonly string datepicker_gif = Url("datepicker.gif");
                    public static readonly string icon_sprite_png = Url("icon_sprite.png");
                    public static readonly string progress_bar_gif = Url("progress_bar.gif");
                    public static readonly string slider_h_bg_gif = Url("slider_h_bg.gif");
                    public static readonly string slider_handles_png = Url("slider_handles.png");
                    public static readonly string slider_v_bg_gif = Url("slider_v_bg.gif");
                    public static readonly string tab_bg_gif = Url("tab_bg.gif");
                    public static readonly string the_gradient_gif = Url("the_gradient.gif");
                    public static readonly string ui_bg_diagonals_thick_18_b81900_40x40_png = Url("ui-bg_diagonals-thick_18_b81900_40x40.png");
                    public static readonly string ui_bg_diagonals_thick_20_666666_40x40_png = Url("ui-bg_diagonals-thick_20_666666_40x40.png");
                    public static readonly string ui_bg_flat_10_000000_40x100_png = Url("ui-bg_flat_10_000000_40x100.png");
                    public static readonly string ui_bg_glass_100_f6f6f6_1x400_png = Url("ui-bg_glass_100_f6f6f6_1x400.png");
                    public static readonly string ui_bg_glass_100_fdf5ce_1x400_png = Url("ui-bg_glass_100_fdf5ce_1x400.png");
                    public static readonly string ui_bg_glass_65_ffffff_1x400_png = Url("ui-bg_glass_65_ffffff_1x400.png");
                    public static readonly string ui_bg_gloss_wave_35_f6a828_500x100_png = Url("ui-bg_gloss-wave_35_f6a828_500x100.png");
                    public static readonly string ui_bg_highlight_soft_100_eeeeee_1x100_png = Url("ui-bg_highlight-soft_100_eeeeee_1x100.png");
                    public static readonly string ui_bg_highlight_soft_75_ffe45c_1x100_png = Url("ui-bg_highlight-soft_75_ffe45c_1x100.png");
                    public static readonly string ui_icons_222222_256x240_png = Url("ui-icons_222222_256x240.png");
                    public static readonly string ui_icons_228ef1_256x240_png = Url("ui-icons_228ef1_256x240.png");
                    public static readonly string ui_icons_ef8c08_256x240_png = Url("ui-icons_ef8c08_256x240.png");
                    public static readonly string ui_icons_ffd27a_256x240_png = Url("ui-icons_ffd27a_256x240.png");
                    public static readonly string ui_icons_ffffff_256x240_png = Url("ui-icons_ffffff_256x240.png");
                }
            
                public static readonly string jquery_ui_1_8rc3_custom_css = Url("jquery-ui-1.8rc3.custom.css");
            }
        
        }
    
        public static readonly string ui_selectmenu_css = Url("ui.selectmenu.css");
        public static readonly string ui_selectmenu_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/ui.selectmenu.min.js") ? Url("ui.selectmenu.min.js") : Url("ui.selectmenu.js");
    }

}

static class T4MVCHelpers {
    // You can change the ProcessVirtualPath method to modify the path that gets returned to the client.
    // e.g. you can prepend a domain, or append a query string:
    //      return "http://localhost" + path + "?foo=bar";
    public static string ProcessVirtualPath(string virtualPath) {
        // The path that comes in starts with ~/ and must first be made absolute
        string path = VirtualPathUtility.ToAbsolute(virtualPath);
        
        // Add your own modifications here before returning the path
        return path;
    }
    
    // Logic to determine if the app is running in production or dev environment
    public static bool IsProduction() { 
        return (HttpContext.Current != null && !HttpContext.Current.IsDebuggingEnabled); 
    }
}




namespace T4MVC {
    [CompilerGenerated]
    public class Dummy {
        private Dummy() { }
        public static Dummy Instance = new Dummy();
    }
}

#endregion T4MVC
#pragma warning restore 1591
#pragma warning restore 0108


